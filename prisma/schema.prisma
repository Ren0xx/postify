generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @db.Timestamptz(6)
  createdAt     DateTime  @db.Timestamptz(6)
  description   String    @default("No description yet")
  image         String?
  accounts      Account[]
  Messages      Message[]
  roomsOwned    Room[]
  sessions      Session[]
  allowedRooms  Room[]    @relation("RoomAllowedUsers")
  User_A        User[]    @relation("UserFriends")
  User_B        User[]    @relation("UserFriends")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id    String @id @default(cuid())
  name  String 
  rooms Room[] @relation("RoomToTag")
}

model Room {
  id           String    @id @default(cuid())
  name         String
  isPublic     Boolean?  @default(true)
  ownerId      String?
  password     String?
  messages     Message[]
  owner        User?     @relation(fields: [ownerId], references: [id])
  allowedUsers User[]    @relation("RoomAllowedUsers")
  tags         Tag[]     @relation("RoomToTag")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  roomId    String
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
}
